"""Added m2m for multiple filenames

Revision ID: 12505f391a14
Revises: 74c7becae858
Create Date: 2017-11-03 20:47:50.072140

"""
from alembic import op
import sqlalchemy as sa


from sqlalchemy import Column, ForeignKey, Integer, MetaData, String, Table
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import backref, sessionmaker, Session as BaseSession, relationship
from sqlalchemy.orm.exc import NoResultFound


# revision identifiers, used by Alembic.
revision = '12505f391a14'
down_revision = '74c7becae858'
branch_labels = None
depends_on = None


Session = sessionmaker()
Base = declarative_base()

# http://alembic.zzzcomputing.com/en/latest/naming.html
Base.metadata = MetaData(naming_convention={
    "ix": 'ix_%(column_0_label)s',
    "uq": "uq_%(table_name)s_%(column_0_name)s",
    "ck": "ck_%(table_name)s_%(constraint_name)s",
    "fk": "fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s",
    "pk": "pk_%(table_name)s"
})

association_table = Table(
    'association',
    Base.metadata,
    Column('malware_id', Integer, ForeignKey('malware.id')),
    Column('filename_id', Integer, ForeignKey('filename.id')),
)


class Malware(Base):
    __tablename__ = 'malware'

    id = Column(Integer(), primary_key=True)
    name = Column(String(255), nullable=True)
    filename = relationship(
        'Filename',
        secondary=association_table,
        backref=backref('malware')
    )


class Filename(Base):
    __tablename__ = 'filename'

    id = Column(Integer(), primary_key=True)
    filename = Column(String(255), nullable=False, unique=True, index=True)

    def __init__(self, filename):
        self.filename = filename


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    op.create_table('filename',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('filename', sa.String(length=255), nullable=False),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_filename'))
    )
    with op.batch_alter_table('filename', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_filename_filename'), ['filename'], unique=True)

    with op.batch_alter_table('association', schema=None) as batch_op:
        batch_op.add_column(sa.Column('filename_id', sa.Integer(), nullable=True))
        batch_op.create_foreign_key(batch_op.f('fk_association_filename_id_filename'), 'filename', ['filename_id'], ['id'])

    bind = op.get_bind()
    session = Session(bind=bind)

    for malware_entry in session.query(Malware):
        try:
            f = session.query(Filename).filter_by(filename=malware_entry.name).one()
            malware_entry.filename.append(f)
            #print("DEBUG: DB Migration - found and added")
        except NoResultFound:
            malware_entry.filename.append(Filename(malware_entry.name))
            #print("DEBUG: DB Migration - not found - caught and created new")

    session.commit()

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('association', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('fk_association_filename_id_filename'), type_='foreignkey')
        batch_op.drop_column('filename_id')

    with op.batch_alter_table('filename', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_filename_filename'))

    op.drop_table('filename')
    # ### end Alembic commands ###
